const BookUser = require('../model/book_user');
const jwt = require('jwt-simple');



function tokenForUser(user){
  const timestamp = new Date().getTime();

  return jwt.encode({sub:user.id,iat:timestamp},process.env.SECRET);//user.id is a proxy for user._id which is generated by mongo
  //secret is combined with sub & iat to create token
}


module.exports = function(req,res,next){

  const userID = req.body.userID;//userID provided by auth0
  const name = req.body.name;
  const provider = req.body.provider;

  const query = provider +'.id';


BookUser.findOne({[query]:userID},function(err,existingUser){//find with the query using fb or twitter id provided by auth0
  if(err){
    console.error('error trying to find user in DB.')
    return res.status(500).send({success:false})
  }

  if(existingUser){
    if(existingUser.location){
      return res.send({token:tokenForUser(existingUser),success:true ,id:existingUser._id, location:true});
      //if exists, give token back and id
    }
     return res.send({token:tokenForUser(existingUser),success:true ,id:existingUser._id, location:false});
     //if exists, give token back and id
  }

BookUser.findOne({"userName":name},function(err,existingUser){
  //if cannot with provided id, use user name
  if(err){
    console.error('error trying to find user in DB.')
    return res.status(500).send({success:false})
  }
if(existingUser){
  //if find with username, save the new id in user and send back token
  existingUser[provider].id = userID;
  existingUser.save();
  if(existingUser.location){
    return res.send({token:tokenForUser(existingUser),success:true,id:existingUser._id, location:true})
  }
  return res.send({token:tokenForUser(existingUser),success:true,id:existingUser._id, location:false})
}



const bookUser = new BookUser({
  //if no name or provider id exists, create new user
  userName:name,
  [query]:userID,
  location:null,
  email:null
});//the query saves the user's unique twitter of fb ID

bookUser.save(function(err){
  if(err){
    console.error('error trying to save user in DB.')
    return res.status(500).send({success:false})
  }
  return res.send({token:tokenForUser(bookUser),success:true, id:user._id, location:false})
  })
})
})
}
